# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:19:22+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import AnyUrl, BaseModel, Field, RootModel, constr


class CompositionEnumFormat(Enum):
    mp4 = 'mp4'
    webm = 'webm'


class CompositionEnumStatus(Enum):
    enqueued = 'enqueued'
    processing = 'processing'
    completed = 'completed'
    deleted = 'deleted'
    failed = 'failed'


class CompositionHookEnumFormat(Enum):
    mp4 = 'mp4'
    webm = 'webm'


class RecordingEnumCodec(Enum):
    VP8 = 'VP8'
    H264 = 'H264'
    OPUS = 'OPUS'
    PCMU = 'PCMU'


class RecordingEnumFormat(Enum):
    mka = 'mka'
    mkv = 'mkv'


class RecordingEnumStatus(Enum):
    processing = 'processing'
    completed = 'completed'
    deleted = 'deleted'
    failed = 'failed'


class RecordingEnumType(Enum):
    audio = 'audio'
    video = 'video'
    data = 'data'


class RoomEnumRoomStatus(Enum):
    in_progress = 'in-progress'
    completed = 'completed'
    failed = 'failed'


class RoomEnumRoomType(Enum):
    go = 'go'
    peer_to_peer = 'peer-to-peer'
    group = 'group'
    group_small = 'group-small'


class RoomEnumVideoCodec(Enum):
    VP8 = 'VP8'
    H264 = 'H264'


class RoomParticipantAnonymizeEnumStatus(Enum):
    connected = 'connected'
    disconnected = 'disconnected'


class RoomParticipantEnumStatus(Enum):
    connected = 'connected'
    disconnected = 'disconnected'


class RoomParticipantPublishedTrackEnumKind(Enum):
    audio = 'audio'
    video = 'video'
    data = 'data'


class RoomParticipantSubscribedTrackEnumKind(Enum):
    audio = 'audio'
    video = 'video'
    data = 'data'


class RoomRecordingEnumCodec(Enum):
    VP8 = 'VP8'
    H264 = 'H264'
    OPUS = 'OPUS'
    PCMU = 'PCMU'


class RoomRecordingEnumFormat(Enum):
    mka = 'mka'
    mkv = 'mkv'


class RoomRecordingEnumStatus(Enum):
    processing = 'processing'
    completed = 'completed'
    deleted = 'deleted'
    failed = 'failed'


class RoomRecordingEnumType(Enum):
    audio = 'audio'
    video = 'video'
    data = 'data'


class StatusCallbackMethod(Enum):
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'


class VideoV1Composition(BaseModel):
    account_sid: Optional[
        constr(pattern=r'^AC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Composition resource.',
    )
    audio_sources: Optional[List[str]] = Field(
        None,
        description='The array of track names to include in the composition. The composition includes all audio sources specified in `audio_sources` except those specified in `audio_sources_excluded`. The track names in this property can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` includes tracks named `student` as well as `studentTeam`.',
    )
    audio_sources_excluded: Optional[List[str]] = Field(
        None,
        description='The array of track names to exclude from the composition. The composition includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this property can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` excludes `student` as well as `studentTeam`. This parameter can also be empty.',
    )
    bitrate: Optional[int] = Field(
        None, description="The average bit rate of the composition's media."
    )
    date_completed: Optional[datetime] = Field(
        None,
        description="The date and time in GMT when the composition's media processing task finished, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.",
    )
    date_created: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    date_deleted: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the composition generated media was deleted, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    duration: Optional[int] = Field(
        None, description="The duration of the composition's media file in seconds."
    )
    format: Optional[CompositionEnumFormat] = Field(
        None,
        description="The container format of the composition's media files as specified in the POST request that created the Composition resource. See [POST Parameters](https://www.twilio.com/docs/video/api/compositions-resource#http-post-parameters) for more information.",
    )
    links: Optional[Dict[str, Any]] = Field(
        None, description='The URL of the media file associated with the composition.'
    )
    media_external_location: Optional[AnyUrl] = Field(
        None,
        description='The URL of the media file associated with the composition when stored externally. See [External S3 Compositions](/docs/video/api/external-s3-compositions) for more details.',
    )
    resolution: Optional[str] = Field(
        None,
        description="The dimensions of the video image in pixels expressed as columns (width) and rows (height). The string's format is `{width}x{height}`, such as `640x480`.",
    )
    room_sid: Optional[
        constr(pattern=r'^RM[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the Group Room that generated the audio and video tracks used in the composition. All media sources included in a composition must belong to the same Group Room.',
    )
    sid: Optional[
        constr(pattern=r'^CJ[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string that we created to identify the Composition resource.',
    )
    size: Optional[int] = Field(
        None, description='The size of the composed media file in bytes.'
    )
    status: Optional[CompositionEnumStatus] = Field(
        None,
        description='The status of the composition. Can be: `enqueued`, `processing`, `completed`, `deleted` or `failed`. `enqueued` is the initial state and indicates that the composition request has been received and is scheduled for processing; `processing` indicates the composition is being processed; `completed` indicates the composition has been completed and is available for download; `deleted` means the composition media has been deleted from the system, but its metadata is still available for 30 days; `failed` indicates the composition failed to execute the media processing task.',
    )
    status_callback: Optional[AnyUrl] = Field(
        None,
        description='The URL called using the `status_callback_method` to send status information on every composition event.',
    )
    status_callback_method: Optional[StatusCallbackMethod] = Field(
        None,
        description='The HTTP method used to call `status_callback`. Can be: `POST` or `GET`, defaults to `POST`.',
    )
    trim: Optional[bool] = Field(
        None,
        description='Whether to remove intervals with no media, as specified in the POST request that created the composition. Compositions with `trim` enabled are shorter when the Room is created and no Participant joins for a while as well as if all the Participants leave the room and join later, because those gaps will be removed. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.',
    )
    url: Optional[AnyUrl] = Field(None, description='The absolute URL of the resource.')
    video_layout: Optional[Any] = Field(
        None,
        description='An object that describes the video layout of the composition in terms of regions. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.',
    )


class VideoV1CompositionHook(BaseModel):
    account_sid: Optional[
        constr(pattern=r'^AC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CompositionHook resource.',
    )
    audio_sources: Optional[List[str]] = Field(
        None,
        description='The array of track names to include in the compositions created by the composition hook. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except those specified in `audio_sources_excluded`. The track names in this property can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` includes tracks named `student` as well as `studentTeam`. Please, be aware that either video_layout or audio_sources have to be provided to get a valid creation request',
    )
    audio_sources_excluded: Optional[List[str]] = Field(
        None,
        description='The array of track names to exclude from the compositions created by the composition hook. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this property can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` excludes `student` as well as `studentTeam`. This parameter can also be empty.',
    )
    date_created: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    date_updated: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    enabled: Optional[bool] = Field(
        None,
        description='Whether the CompositionHook is active. When `true`, the CompositionHook is triggered for every completed Group Room on the account. When `false`, the CompositionHook is never triggered.',
    )
    format: Optional[CompositionHookEnumFormat] = Field(
        None,
        description='The container format of the media files used by the compositions created by the composition hook. If `mp4` or `webm`, `audio_sources` must have one or more tracks and/or a `video_layout` element must contain a valid `video_sources` list, otherwise an error occurs.',
    )
    friendly_name: Optional[str] = Field(
        None,
        description='The string that you assigned to describe the resource. Can be up to 100 characters long and must be unique within the account.',
    )
    resolution: Optional[str] = Field(
        None,
        description="The dimensions of the video image in pixels expressed as columns (width) and rows (height). The string's format is `{width}x{height}`, such as `640x480`.",
    )
    sid: Optional[
        constr(pattern=r'^HK[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string that we created to identify the CompositionHook resource.',
    )
    status_callback: Optional[AnyUrl] = Field(
        None,
        description='The URL we call using the `status_callback_method` to send status information to your application.',
    )
    status_callback_method: Optional[StatusCallbackMethod] = Field(
        None,
        description='The HTTP method we should use to call `status_callback`. Can be `POST` or `GET` and defaults to `POST`.',
    )
    trim: Optional[bool] = Field(
        None,
        description='Whether intervals with no media are clipped, as specified in the POST request that created the CompositionHook resource. Compositions with `trim` enabled are shorter when the Room is created and no Participant joins for a while as well as if all the Participants leave the room and join later, because those gaps will be removed. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.',
    )
    url: Optional[AnyUrl] = Field(None, description='The absolute URL of the resource.')
    video_layout: Optional[Any] = Field(
        None,
        description='A JSON object that describes the video layout of the composition in terms of regions as specified in the HTTP POST request that created the CompositionHook resource. See [POST Parameters](https://www.twilio.com/docs/video/api/compositions-resource#http-post-parameters) for more information. Please, be aware that either video_layout or audio_sources have to be provided to get a valid creation request',
    )


class VideoV1CompositionSettings(BaseModel):
    account_sid: Optional[
        constr(pattern=r'^AC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CompositionSettings resource.',
    )
    aws_credentials_sid: Optional[
        constr(pattern=r'^CR[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='The SID of the stored Credential resource.')
    aws_s3_url: Optional[AnyUrl] = Field(
        None,
        description="The URL of the AWS S3 bucket where the compositions are stored. We only support DNS-compliant URLs like `https://documentation-example-twilio-bucket/compositions`, where `compositions` is the path in which you want the compositions to be stored. This URL accepts only URI-valid characters, as described in the <a href='https://tools.ietf.org/html/rfc3986#section-2'>RFC 3986</a>.",
    )
    aws_storage_enabled: Optional[bool] = Field(
        None,
        description='Whether all compositions are written to the `aws_s3_url`. When `false`, all compositions are stored in our cloud.',
    )
    encryption_enabled: Optional[bool] = Field(
        None,
        description='Whether all compositions are stored in an encrypted form. The default is `false`.',
    )
    encryption_key_sid: Optional[
        constr(pattern=r'^CR[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None, description='The SID of the Public Key resource used for encryption.'
    )
    friendly_name: Optional[str] = Field(
        None,
        description='The string that you assigned to describe the resource and that will be shown in the console',
    )
    url: Optional[AnyUrl] = Field(None, description='The absolute URL of the resource.')


class VideoV1Recording(BaseModel):
    account_sid: Optional[
        constr(pattern=r'^AC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource.',
    )
    codec: Optional[RecordingEnumCodec] = Field(
        None,
        description='The codec used to encode the track. Can be: `VP8`, `H264`, `OPUS`, and `PCMU`.',
    )
    container_format: Optional[RecordingEnumFormat] = Field(
        None,
        description='The file format for the recording. Can be: `mka` or `mkv`. Video Room recordings are captured in [Matroska container format](https://matroska.org/), `mka` is for audio files and `mkv` for video files.',
    )
    date_created: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    duration: Optional[int] = Field(
        None,
        description='The duration of the recording in seconds rounded to the nearest second. Sub-second tracks have a `Duration` property of 1 second',
    )
    grouping_sids: Optional[Any] = Field(
        None,
        description='A list of SIDs related to the recording. Includes the `room_sid` and `participant_sid`.',
    )
    links: Optional[Dict[str, Any]] = Field(
        None, description='The URLs of related resources.'
    )
    media_external_location: Optional[AnyUrl] = Field(
        None,
        description='The URL of the media file associated with the recording when stored externally. See [External S3 Recordings](/docs/video/api/external-s3-recordings) for more details.',
    )
    offset: Optional[int] = Field(
        None,
        description='The time in milliseconds elapsed between an arbitrary point in time, common to all group rooms, and the moment when the source room of this track started. This information provides a synchronization mechanism for recordings belonging to the same room.',
    )
    sid: Optional[
        constr(pattern=r'^RT[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string that we created to identify the Recording resource.',
    )
    size: Optional[int] = Field(
        None, description='The size of the recorded track, in bytes.'
    )
    source_sid: Optional[
        constr(pattern=r'^[a-zA-Z]{2}[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the recording source. For a Room Recording, this value is a `track_sid`.',
    )
    status: Optional[RecordingEnumStatus] = Field(
        None,
        description='The status of the recording. Can be: `processing`, `completed`, or `deleted`. `processing` indicates the recording is still being captured; `completed` indicates the recording has been captured and is now available for download. `deleted` means the recording media has been deleted from the system, but its metadata is still available.',
    )
    status_callback: Optional[AnyUrl] = Field(
        None,
        description='The URL called using the `status_callback_method` to send status information on every recording event.',
    )
    status_callback_method: Optional[StatusCallbackMethod] = Field(
        None,
        description='The HTTP method used to call `status_callback`. Can be: `POST` or `GET`, defaults to `POST`.',
    )
    track_name: Optional[str] = Field(
        None,
        description='The name that was given to the source track of the recording. If no name is given, the `source_sid` is used.',
    )
    type: Optional[RecordingEnumType] = Field(
        None, description="The recording's media type. Can be: `audio` or `video`."
    )
    url: Optional[AnyUrl] = Field(None, description='The absolute URL of the resource.')


class VideoV1RecordingSettings(BaseModel):
    account_sid: Optional[
        constr(pattern=r'^AC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the RecordingSettings resource.',
    )
    aws_credentials_sid: Optional[
        constr(pattern=r'^CR[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='The SID of the stored Credential resource.')
    aws_s3_url: Optional[AnyUrl] = Field(
        None,
        description="The URL of the AWS S3 bucket where the recordings are stored. We only support DNS-compliant URLs like `https://documentation-example-twilio-bucket/recordings`, where `recordings` is the path in which you want the recordings to be stored. This URL accepts only URI-valid characters, as described in the <a href='https://tools.ietf.org/html/rfc3986#section-2'>RFC 3986</a>.",
    )
    aws_storage_enabled: Optional[bool] = Field(
        None,
        description='Whether all recordings are written to the `aws_s3_url`. When `false`, all recordings are stored in our cloud.',
    )
    encryption_enabled: Optional[bool] = Field(
        None,
        description='Whether all recordings are stored in an encrypted form. The default is `false`.',
    )
    encryption_key_sid: Optional[
        constr(pattern=r'^CR[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None, description='The SID of the Public Key resource used for encryption.'
    )
    friendly_name: Optional[str] = Field(
        None,
        description='The string that you assigned to describe the resource and show the user in the console',
    )
    url: Optional[AnyUrl] = Field(None, description='The absolute URL of the resource.')


class VideoV1Room(BaseModel):
    account_sid: Optional[
        constr(pattern=r'^AC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Room resource.',
    )
    audio_only: Optional[bool] = Field(
        None,
        description='When set to true, indicates that the participants in the room will only publish audio. No video tracks will be allowed. Group rooms only.',
    )
    date_created: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    date_updated: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    duration: Optional[int] = Field(
        None, description='The duration of the room in seconds.'
    )
    empty_room_timeout: Optional[int] = Field(
        None,
        description='Specifies how long (in minutes) a room will remain active after last participant leaves. Can be configured when creating a room via REST API. For Ad-Hoc rooms this value cannot be changed.',
    )
    enable_turn: Optional[bool] = Field(
        None, description='Deprecated, now always considered to be true.'
    )
    end_time: Optional[datetime] = Field(
        None,
        description='The UTC end time of the room in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.',
    )
    large_room: Optional[bool] = Field(
        None, description='Indicates if this is a large room.'
    )
    links: Optional[Dict[str, Any]] = Field(
        None, description='The URLs of related resources.'
    )
    max_concurrent_published_tracks: Optional[int] = Field(
        None,
        description='The maximum number of published audio, video, and data tracks all participants combined are allowed to publish in the room at the same time. Check [Programmable Video Limits](https://www.twilio.com/docs/video/programmable-video-limits) for more details. If it is set to 0 it means unconstrained.',
    )
    max_participant_duration: Optional[int] = Field(
        None,
        description='The maximum number of seconds a Participant can be connected to the room. The maximum possible value is 86400 seconds (24 hours). The default is 14400 seconds (4 hours).',
    )
    max_participants: Optional[int] = Field(
        None,
        description='The maximum number of concurrent Participants allowed in the room. ',
    )
    media_region: Optional[str] = Field(
        None,
        description='The region for the media server in Group Rooms.  Can be: one of the [available Media Regions](https://www.twilio.com/docs/video/ip-address-whitelisting#media-servers). ***This feature is not available in `peer-to-peer` rooms.***',
    )
    record_participants_on_connect: Optional[bool] = Field(
        None,
        description='Whether to start recording when Participants connect. ***This feature is not available in `peer-to-peer` rooms.***',
    )
    sid: Optional[
        constr(pattern=r'^RM[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string that we created to identify the Room resource.',
    )
    status: Optional[RoomEnumRoomStatus] = Field(
        None,
        description='The status of the room. Can be: `in-progress`, `failed`, or `completed`.',
    )
    status_callback: Optional[AnyUrl] = Field(
        None,
        description='The URL we call using the `status_callback_method` to send status information to your application on every room event. See [Status Callbacks](https://www.twilio.com/docs/video/api/status-callbacks) for more info.',
    )
    status_callback_method: Optional[StatusCallbackMethod] = Field(
        None,
        description='The HTTP method we use to call `status_callback`. Can be `POST` or `GET` and defaults to `POST`.',
    )
    type: Optional[RoomEnumRoomType] = Field(
        None,
        description='The type of room. Can be: `go`, `peer-to-peer`, `group-small`, or `group`. The default value is `group`.',
    )
    unique_name: Optional[str] = Field(
        None,
        description="An application-defined string that uniquely identifies the resource. It can be used as a `room_sid` in place of the resource's `sid` in the URL to address the resource, assuming it does not contain any [reserved characters](https://tools.ietf.org/html/rfc3986#section-2.2) that would need to be URL encoded. This value is unique for `in-progress` rooms. SDK clients can use this name to connect to the room. REST API clients can use this name in place of the Room SID to interact with the room as long as the room is `in-progress`.",
    )
    unused_room_timeout: Optional[int] = Field(
        None,
        description='Specifies how long (in minutes) a room will remain active if no one joins. Can be configured when creating a room via REST API. For Ad-Hoc rooms this value cannot be changed.',
    )
    url: Optional[AnyUrl] = Field(None, description='The absolute URL of the resource.')
    video_codecs: Optional[List[RoomEnumVideoCodec]] = Field(
        None,
        description='An array of the video codecs that are supported when publishing a track in the room.  Can be: `VP8` and `H264`.  ***This feature is not available in `peer-to-peer` rooms***',
    )


class VideoV1RoomRoomParticipant(BaseModel):
    account_sid: Optional[
        constr(pattern=r'^AC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the RoomParticipant resource.',
    )
    date_created: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    date_updated: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    duration: Optional[int] = Field(
        None,
        description='The duration in seconds that the participant was `connected`. Populated only after the participant is `disconnected`.',
    )
    end_time: Optional[datetime] = Field(
        None,
        description='The time when the participant disconnected from the room in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.',
    )
    identity: Optional[str] = Field(
        None,
        description="The application-defined string that uniquely identifies the resource's User within a Room. If a client joins with an existing Identity, the existing client is disconnected. See [access tokens](https://www.twilio.com/docs/video/tutorials/user-identity-access-tokens) and [limits](https://www.twilio.com/docs/video/programmable-video-limits) for more info. ",
    )
    links: Optional[Dict[str, Any]] = Field(
        None, description='The URLs of related resources.'
    )
    room_sid: Optional[
        constr(pattern=r'^RM[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description="The SID of the participant's room.")
    sid: Optional[
        constr(pattern=r'^PA[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string that we created to identify the RoomParticipant resource.',
    )
    start_time: Optional[datetime] = Field(
        None,
        description='The time of participant connected to the room in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.',
    )
    status: Optional[RoomParticipantEnumStatus] = Field(
        None,
        description='The status of the Participant. Can be: `connected` or `disconnected`.',
    )
    url: Optional[AnyUrl] = Field(None, description='The absolute URL of the resource.')


class VideoV1RoomRoomParticipantRoomParticipantAnonymize(BaseModel):
    account_sid: Optional[
        constr(pattern=r'^AC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the RoomParticipant resource.',
    )
    date_created: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    date_updated: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    duration: Optional[int] = Field(
        None,
        description='The duration in seconds that the participant was `connected`. Populated only after the participant is `disconnected`.',
    )
    end_time: Optional[datetime] = Field(
        None,
        description='The time when the participant disconnected from the room in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.',
    )
    identity: Optional[
        constr(pattern=r'^PA[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='The SID of the participant.')
    room_sid: Optional[
        constr(pattern=r'^RM[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description="The SID of the participant's room.")
    sid: Optional[
        constr(pattern=r'^PA[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string that we created to identify the RoomParticipant resource.',
    )
    start_time: Optional[datetime] = Field(
        None,
        description='The time of participant connected to the room in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#UTC) format.',
    )
    status: Optional[RoomParticipantAnonymizeEnumStatus] = Field(
        None,
        description='The status of the Participant. Can be: `connected` or `disconnected`.',
    )
    url: Optional[AnyUrl] = Field(None, description='The absolute URL of the resource.')


class VideoV1RoomRoomParticipantRoomParticipantPublishedTrack(BaseModel):
    date_created: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    date_updated: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    enabled: Optional[bool] = Field(None, description='Whether the track is enabled.')
    kind: Optional[RoomParticipantPublishedTrackEnumKind] = Field(
        None, description='The track type. Can be: `audio`, `video` or `data`.'
    )
    name: Optional[str] = Field(
        None,
        description="The track name. Must be no more than 128 characters, and be unique among the participant's published tracks.",
    )
    participant_sid: Optional[
        constr(pattern=r'^PA[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the Participant resource with the published track.',
    )
    room_sid: Optional[
        constr(pattern=r'^RM[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None, description='The SID of the Room resource where the track is published.'
    )
    sid: Optional[
        constr(pattern=r'^MT[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string that we created to identify the RoomParticipantPublishedTrack resource.',
    )
    url: Optional[AnyUrl] = Field(None, description='The absolute URL of the resource.')


class Rule(BaseModel):
    all: Optional[bool] = None
    kind: Optional[str] = None
    priority: Optional[str] = None
    publisher: Optional[str] = None
    track: Optional[str] = None
    type: Optional[str] = None


class VideoV1RoomRoomParticipantRoomParticipantSubscribeRule(BaseModel):
    date_created: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    date_updated: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    participant_sid: Optional[
        constr(pattern=r'^PA[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None, description='The SID of the Participant resource for the Subscribe Rules.'
    )
    room_sid: Optional[
        constr(pattern=r'^RM[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='The SID of the Room resource for the Subscribe Rules')
    rules: Optional[List[Rule]] = Field(
        None,
        description='A collection of Subscribe Rules that describe how to include or exclude matching tracks. See the [Specifying Subscribe Rules](https://www.twilio.com/docs/video/api/track-subscriptions#specifying-sr) section for further information.',
    )


class VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack(BaseModel):
    date_created: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    date_updated: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    enabled: Optional[bool] = Field(None, description='Whether the track is enabled.')
    kind: Optional[RoomParticipantSubscribedTrackEnumKind] = Field(
        None, description='The track type. Can be: `audio`, `video` or `data`.'
    )
    name: Optional[str] = Field(
        None,
        description="The track name. Must have no more than 128 characters and be unique among the participant's published tracks.",
    )
    participant_sid: Optional[
        constr(pattern=r'^PA[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None, description='The SID of the participant that subscribes to the track.'
    )
    publisher_sid: Optional[
        constr(pattern=r'^PA[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='The SID of the participant that publishes the track.')
    room_sid: Optional[
        constr(pattern=r'^RM[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='The SID of the room where the track is published.')
    sid: Optional[
        constr(pattern=r'^MT[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string that we created to identify the RoomParticipantSubscribedTrack resource.',
    )
    url: Optional[AnyUrl] = Field(None, description='The absolute URL of the resource.')


class VideoV1RoomRoomRecording(BaseModel):
    account_sid: Optional[
        constr(pattern=r'^AC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the RoomRecording resource.',
    )
    codec: Optional[RoomRecordingEnumCodec] = Field(
        None, description='The codec used for the recording. Can be: `VP8` or `H264`.'
    )
    container_format: Optional[RoomRecordingEnumFormat] = Field(
        None,
        description='The file format for the recording. Can be: `mka` or `mkv`. Video Room recordings are captured in [Matroska container format](https://matroska.org/), `mka` is for audio files and `mkv` for video files.',
    )
    date_created: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    duration: Optional[int] = Field(
        None,
        description='The duration of the recording rounded to the nearest second. Sub-second duration tracks have a `duration` of 1 second',
    )
    grouping_sids: Optional[Any] = Field(
        None,
        description='A list of SIDs related to the Recording. Includes the `room_sid` and `participant_sid`.',
    )
    links: Optional[Dict[str, Any]] = Field(
        None, description='The URLs of related resources.'
    )
    media_external_location: Optional[AnyUrl] = Field(
        None,
        description='The URL of the media file associated with the recording when stored externally. See [External S3 Recordings](/docs/video/api/external-s3-recordings) for more details.',
    )
    offset: Optional[int] = Field(
        None,
        description='The time in milliseconds elapsed between an arbitrary point in time, common to all group rooms, and the moment when the source room of this track started. This information provides a synchronization mechanism for recordings belonging to the same room.',
    )
    room_sid: Optional[
        constr(pattern=r'^RM[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the Room resource the recording is associated with.',
    )
    sid: Optional[
        constr(pattern=r'^RT[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The unique string that we created to identify the RoomRecording resource.',
    )
    size: Optional[int] = Field(
        None, description='The size of the recorded track in bytes.'
    )
    source_sid: Optional[
        constr(pattern=r'^[a-zA-Z]{2}[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the recording source. For a Room Recording, this value is a `track_sid`.',
    )
    status: Optional[RoomRecordingEnumStatus] = Field(
        None,
        description='The status of the recording. Can be: `processing`, `completed`, or `deleted`. `processing` indicates the Recording is still being captured. `completed` indicates the Recording has been captured and is now available for download. `deleted` means the recording media has been deleted from the system, but its metadata is still available for historical purposes.',
    )
    track_name: Optional[str] = Field(
        None,
        description='The name that was given to the source track of the recording. If no name is given, the `source_sid` is used.',
    )
    type: Optional[RoomRecordingEnumType] = Field(
        None, description="The recording's media type. Can be: `audio` or `video`."
    )
    url: Optional[AnyUrl] = Field(None, description='The absolute URL of the resource.')


class Rule1(BaseModel):
    all: Optional[bool] = None
    kind: Optional[str] = None
    publisher: Optional[str] = None
    track: Optional[str] = None
    type: Optional[str] = None


class VideoV1RoomRoomRecordingRule(BaseModel):
    date_created: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    date_updated: Optional[datetime] = Field(
        None,
        description='The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    room_sid: Optional[
        constr(pattern=r'^RM[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='The SID of the Room resource for the Recording Rules')
    rules: Optional[List[Rule1]] = Field(
        None,
        description='A collection of Recording Rules that describe how to include or exclude matching tracks for recording',
    )


class Meta(BaseModel):
    first_page_url: Optional[AnyUrl] = None
    key: Optional[str] = None
    next_page_url: Optional[AnyUrl] = None
    page: Optional[int] = None
    page_size: Optional[int] = None
    previous_page_url: Optional[AnyUrl] = None
    url: Optional[AnyUrl] = None


class V1CompositionHooksGetResponse(BaseModel):
    composition_hooks: Optional[List[VideoV1CompositionHook]] = None
    meta: Optional[Meta] = None


class V1CompositionHooksPostRequest(BaseModel):
    AudioSources: Optional[List[str]] = Field(
        None,
        description='An array of track names from the same group room to merge into the compositions created by the composition hook. Can include zero or more track names. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` includes tracks named `student` as well as `studentTeam`.',
    )
    AudioSourcesExcluded: Optional[List[str]] = Field(
        None,
        description='An array of track names to exclude. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` excludes `student` as well as `studentTeam`. This parameter can also be empty.',
    )
    Enabled: Optional[bool] = Field(
        None,
        description='Whether the composition hook is active. When `true`, the composition hook will be triggered for every completed Group Room in the account. When `false`, the composition hook will never be triggered.',
    )
    Format: Optional[CompositionHookEnumFormat] = Field(
        None,
        description='The container format of the media files used by the compositions created by the composition hook. Can be: `mp4` or `webm` and the default is `webm`. If `mp4` or `webm`, `audio_sources` must have one or more tracks and/or a `video_layout` element must contain a valid `video_sources` list, otherwise an error occurs.',
    )
    FriendlyName: str = Field(
        ...,
        description='A descriptive string that you create to describe the resource. It can be up to  100 characters long and it must be unique within the account.',
    )
    Resolution: Optional[str] = Field(
        None,
        description="A string that describes the columns (width) and rows (height) of the generated composed video in pixels. Defaults to `640x480`. \nThe string's format is `{width}x{height}` where: \n\n* 16 <= `{width}` <= 1280\n* 16 <= `{height}` <= 1280\n* `{width}` * `{height}` <= 921,600\n\nTypical values are: \n\n* HD = `1280x720`\n* PAL = `1024x576`\n* VGA = `640x480`\n* CIF = `320x240`\n\nNote that the `resolution` imposes an aspect ratio to the resulting composition. When the original video tracks are constrained by the aspect ratio, they are scaled to fit. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.",
    )
    StatusCallback: Optional[AnyUrl] = Field(
        None,
        description='The URL we should call using the `status_callback_method` to send status information to your application on every composition event. If not provided, status callback events will not be dispatched.',
    )
    StatusCallbackMethod_1: Optional[StatusCallbackMethod] = Field(
        None,
        alias='StatusCallbackMethod',
        description='The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.',
    )
    Trim: Optional[bool] = Field(
        None,
        description='Whether to clip the intervals where there is no active media in the Compositions triggered by the composition hook. The default is `true`. Compositions with `trim` enabled are shorter when the Room is created and no Participant joins for a while as well as if all the Participants leave the room and join later, because those gaps will be removed. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.',
    )
    VideoLayout: Optional[Any] = Field(
        None,
        description='An object that describes the video layout of the composition hook in terms of regions. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.',
    )


class V1CompositionHooksSidPostRequest(BaseModel):
    AudioSources: Optional[List[str]] = Field(
        None,
        description='An array of track names from the same group room to merge into the compositions created by the composition hook. Can include zero or more track names. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` includes tracks named `student` as well as `studentTeam`.',
    )
    AudioSourcesExcluded: Optional[List[str]] = Field(
        None,
        description='An array of track names to exclude. A composition triggered by the composition hook includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which matches zero or more characters in a track name. For example, `student*` excludes `student` as well as `studentTeam`. This parameter can also be empty.',
    )
    Enabled: Optional[bool] = Field(
        None,
        description='Whether the composition hook is active. When `true`, the composition hook will be triggered for every completed Group Room in the account. When `false`, the composition hook never triggers.',
    )
    Format: Optional[CompositionHookEnumFormat] = Field(
        None,
        description='The container format of the media files used by the compositions created by the composition hook. Can be: `mp4` or `webm` and the default is `webm`. If `mp4` or `webm`, `audio_sources` must have one or more tracks and/or a `video_layout` element must contain a valid `video_sources` list, otherwise an error occurs.',
    )
    FriendlyName: str = Field(
        ...,
        description='A descriptive string that you create to describe the resource. It can be up to  100 characters long and it must be unique within the account.',
    )
    Resolution: Optional[str] = Field(
        None,
        description="A string that describes the columns (width) and rows (height) of the generated composed video in pixels. Defaults to `640x480`. \nThe string's format is `{width}x{height}` where: \n\n* 16 <= `{width}` <= 1280\n* 16 <= `{height}` <= 1280\n* `{width}` * `{height}` <= 921,600\n\nTypical values are: \n\n* HD = `1280x720`\n* PAL = `1024x576`\n* VGA = `640x480`\n* CIF = `320x240`\n\nNote that the `resolution` imposes an aspect ratio to the resulting composition. When the original video tracks are constrained by the aspect ratio, they are scaled to fit. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.",
    )
    StatusCallback: Optional[AnyUrl] = Field(
        None,
        description='The URL we should call using the `status_callback_method` to send status information to your application on every composition event. If not provided, status callback events will not be dispatched.',
    )
    StatusCallbackMethod_1: Optional[StatusCallbackMethod] = Field(
        None,
        alias='StatusCallbackMethod',
        description='The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.',
    )
    Trim: Optional[bool] = Field(
        None,
        description='Whether to clip the intervals where there is no active media in the compositions triggered by the composition hook. The default is `true`. Compositions with `trim` enabled are shorter when the Room is created and no Participant joins for a while as well as if all the Participants leave the room and join later, because those gaps will be removed. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.',
    )
    VideoLayout: Optional[Any] = Field(
        None,
        description='A JSON object that describes the video layout of the composition hook in terms of regions. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.',
    )


class V1CompositionSettingsDefaultPostRequest(BaseModel):
    AwsCredentialsSid: Optional[
        constr(pattern=r'^CR[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='The SID of the stored Credential resource.')
    AwsS3Url: Optional[AnyUrl] = Field(
        None,
        description="The URL of the AWS S3 bucket where the compositions should be stored. We only support DNS-compliant URLs like `https://documentation-example-twilio-bucket/compositions`, where `compositions` is the path in which you want the compositions to be stored. This URL accepts only URI-valid characters, as described in the <a href='https://tools.ietf.org/html/rfc3986#section-2'>RFC 3986</a>.",
    )
    AwsStorageEnabled: Optional[bool] = Field(
        None,
        description='Whether all compositions should be written to the `aws_s3_url`. When `false`, all compositions are stored in our cloud.',
    )
    EncryptionEnabled: Optional[bool] = Field(
        None,
        description='Whether all compositions should be stored in an encrypted form. The default is `false`.',
    )
    EncryptionKeySid: Optional[
        constr(pattern=r'^CR[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None, description='The SID of the Public Key resource to use for encryption.'
    )
    FriendlyName: str = Field(
        ...,
        description='A descriptive string that you create to describe the resource and show to the user in the console',
    )


class V1CompositionsGetResponse(BaseModel):
    compositions: Optional[List[VideoV1Composition]] = None
    meta: Optional[Meta] = None


class V1CompositionsPostRequest(BaseModel):
    AudioSources: Optional[List[str]] = Field(
        None,
        description='An array of track names from the same group room to merge into the new composition. Can include zero or more track names. The new composition includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which will match zero or more characters in a track name. For example, `student*` includes `student` as well as `studentTeam`. Please, be aware that either video_layout or audio_sources have to be provided to get a valid creation request',
    )
    AudioSourcesExcluded: Optional[List[str]] = Field(
        None,
        description='An array of track names to exclude. The new composition includes all audio sources specified in `audio_sources` except for those specified in `audio_sources_excluded`. The track names in this parameter can include an asterisk as a wild card character, which will match zero or more characters in a track name. For example, `student*` excludes `student` as well as `studentTeam`. This parameter can also be empty.',
    )
    Format: Optional[CompositionEnumFormat] = Field(
        None,
        description="The container format of the composition's media files. Can be: `mp4` or `webm` and the default is `webm`. If you specify `mp4` or `webm`, you must also specify one or more `audio_sources` and/or a `video_layout` element that contains a valid `video_sources` list, otherwise an error occurs.",
    )
    Resolution: Optional[str] = Field(
        None,
        description="A string that describes the columns (width) and rows (height) of the generated composed video in pixels. Defaults to `640x480`. \nThe string's format is `{width}x{height}` where: \n\n* 16 <= `{width}` <= 1280\n* 16 <= `{height}` <= 1280\n* `{width}` * `{height}` <= 921,600\n\nTypical values are: \n\n* HD = `1280x720`\n* PAL = `1024x576`\n* VGA = `640x480`\n* CIF = `320x240`\n\nNote that the `resolution` imposes an aspect ratio to the resulting composition. When the original video tracks are constrained by the aspect ratio, they are scaled to fit. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.",
    )
    RoomSid: constr(pattern=r'^RM[0-9a-fA-F]{32}$', min_length=34, max_length=34) = (
        Field(
            ...,
            description='The SID of the Group Room with the media tracks to be used as composition sources.',
        )
    )
    StatusCallback: Optional[AnyUrl] = Field(
        None,
        description='The URL we should call using the `status_callback_method` to send status information to your application on every composition event. If not provided, status callback events will not be dispatched.',
    )
    StatusCallbackMethod_1: Optional[StatusCallbackMethod] = Field(
        None,
        alias='StatusCallbackMethod',
        description='The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.',
    )
    Trim: Optional[bool] = Field(
        None,
        description='Whether to clip the intervals where there is no active media in the composition. The default is `true`. Compositions with `trim` enabled are shorter when the Room is created and no Participant joins for a while as well as if all the Participants leave the room and join later, because those gaps will be removed. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info.',
    )
    VideoLayout: Optional[Any] = Field(
        None,
        description='An object that describes the video layout of the composition in terms of regions. See [Specifying Video Layouts](https://www.twilio.com/docs/video/api/compositions-resource#specifying-video-layouts) for more info. Please, be aware that either video_layout or audio_sources have to be provided to get a valid creation request',
    )


class V1RecordingSettingsDefaultPostRequest(BaseModel):
    AwsCredentialsSid: Optional[
        constr(pattern=r'^CR[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='The SID of the stored Credential resource.')
    AwsS3Url: Optional[AnyUrl] = Field(
        None,
        description="The URL of the AWS S3 bucket where the recordings should be stored. We only support DNS-compliant URLs like `https://documentation-example-twilio-bucket/recordings`, where `recordings` is the path in which you want the recordings to be stored. This URL accepts only URI-valid characters, as described in the <a href='https://tools.ietf.org/html/rfc3986#section-2'>RFC 3986</a>.",
    )
    AwsStorageEnabled: Optional[bool] = Field(
        None,
        description='Whether all recordings should be written to the `aws_s3_url`. When `false`, all recordings are stored in our cloud.',
    )
    EncryptionEnabled: Optional[bool] = Field(
        None,
        description='Whether all recordings should be stored in an encrypted form. The default is `false`.',
    )
    EncryptionKeySid: Optional[
        constr(pattern=r'^CR[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None, description='The SID of the Public Key resource to use for encryption.'
    )
    FriendlyName: str = Field(
        ...,
        description='A descriptive string that you create to describe the resource and be shown to users in the console',
    )


class V1RecordingsGetResponse(BaseModel):
    meta: Optional[Meta] = None
    recordings: Optional[List[VideoV1Recording]] = None


class GroupingSid(
    RootModel[
        List[
            constr(
                pattern=r'^[a-zA-Z]{2}[0-9a-fA-F]{32}$', min_length=34, max_length=34
            )
        ]
    ]
):
    root: List[
        constr(pattern=r'^[a-zA-Z]{2}[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ]


class V1RoomsGetResponse(BaseModel):
    meta: Optional[Meta] = None
    rooms: Optional[List[VideoV1Room]] = None


class V1RoomsPostRequest(BaseModel):
    AudioOnly: Optional[bool] = Field(
        None,
        description='When set to true, indicates that the participants in the room will only publish audio. No video tracks will be allowed. Group rooms only.',
    )
    EmptyRoomTimeout: Optional[int] = Field(
        None,
        description='Configures how long (in minutes) a room will remain active after last participant leaves. Valid values range from 1 to 60 minutes (no fractions).',
    )
    EnableTurn: Optional[bool] = Field(
        None, description='Deprecated, now always considered to be true.'
    )
    LargeRoom: Optional[bool] = Field(
        None, description='When set to true, indicated that this is the large room.'
    )
    MaxParticipantDuration: Optional[int] = Field(
        None,
        description='The maximum number of seconds a Participant can be connected to the room. The maximum possible value is 86400 seconds (24 hours). The default is 14400 seconds (4 hours).',
    )
    MaxParticipants: Optional[int] = Field(
        None,
        description='The maximum number of concurrent Participants allowed in the room. Peer-to-peer rooms can have up to 10 Participants. Small Group rooms can have up to 4 Participants. Group rooms can have up to 50 Participants.',
    )
    MediaRegion: Optional[str] = Field(
        None,
        description='The region for the media server in Group Rooms.  Can be: one of the [available Media Regions](https://www.twilio.com/docs/video/ip-address-whitelisting#group-rooms-media-servers). ***This feature is not available in `peer-to-peer` rooms.***',
    )
    RecordParticipantsOnConnect: Optional[bool] = Field(
        None,
        description='Whether to start recording when Participants connect. ***This feature is not available in `peer-to-peer` rooms.***',
    )
    RecordingRules: Optional[Any] = Field(
        None,
        description='A collection of Recording Rules that describe how to include or exclude matching tracks for recording',
    )
    StatusCallback: Optional[AnyUrl] = Field(
        None,
        description='The URL we should call using the `status_callback_method` to send status information to your application on every room event. See [Status Callbacks](https://www.twilio.com/docs/video/api/status-callbacks) for more info.',
    )
    StatusCallbackMethod_1: Optional[StatusCallbackMethod] = Field(
        None,
        alias='StatusCallbackMethod',
        description='The HTTP method we should use to call `status_callback`. Can be `POST` or `GET`.',
    )
    Type: Optional[RoomEnumRoomType] = Field(
        None,
        description='The type of room. Can be: `go`, `peer-to-peer`, `group-small`, or `group`. The default value is `group`.',
    )
    UniqueName: Optional[str] = Field(
        None,
        description="An application-defined string that uniquely identifies the resource. It can be used as a `room_sid` in place of the resource's `sid` in the URL to address the resource, assuming it does not contain any [reserved characters](https://tools.ietf.org/html/rfc3986#section-2.2) that would need to be URL encoded. This value is unique for `in-progress` rooms. SDK clients can use this name to connect to the room. REST API clients can use this name in place of the Room SID to interact with the room as long as the room is `in-progress`.",
    )
    UnusedRoomTimeout: Optional[int] = Field(
        None,
        description='Configures how long (in minutes) a room will remain active if no one joins. Valid values range from 1 to 60 minutes (no fractions).',
    )
    VideoCodecs: Optional[List[RoomEnumVideoCodec]] = Field(
        None,
        description='An array of the video codecs that are supported when publishing a track in the room.  Can be: `VP8` and `H264`.  ***This feature is not available in `peer-to-peer` rooms***',
    )


class V1RoomsRoomSidParticipantsGetResponse(BaseModel):
    meta: Optional[Meta] = None
    participants: Optional[List[VideoV1RoomRoomParticipant]] = None


class V1RoomsRoomSidParticipantsParticipantSidPublishedTracksGetResponse(BaseModel):
    meta: Optional[Meta] = None
    published_tracks: Optional[
        List[VideoV1RoomRoomParticipantRoomParticipantPublishedTrack]
    ] = None


class V1RoomsRoomSidParticipantsParticipantSidSubscribeRulesPostRequest(BaseModel):
    Rules: Optional[Any] = Field(
        None,
        description='A JSON-encoded array of subscribe rules. See the [Specifying Subscribe Rules](https://www.twilio.com/docs/video/api/track-subscriptions#specifying-sr) section for further information.',
    )


class V1RoomsRoomSidParticipantsParticipantSidSubscribedTracksGetResponse(BaseModel):
    meta: Optional[Meta] = None
    subscribed_tracks: Optional[
        List[VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack]
    ] = None


class V1RoomsRoomSidParticipantsSidPostRequest(BaseModel):
    Status: Optional[RoomParticipantEnumStatus] = Field(
        None,
        description='The new status of the resource. Can be: `connected` or `disconnected`. For `in-progress` Rooms the default Status is `connected`, for `completed` Rooms only `disconnected` Participants are returned.',
    )


class V1RoomsRoomSidRecordingRulesPostRequest(BaseModel):
    Rules: Optional[Any] = Field(
        None, description='A JSON-encoded array of recording rules.'
    )


class V1RoomsRoomSidRecordingsGetResponse(BaseModel):
    meta: Optional[Meta] = None
    recordings: Optional[List[VideoV1RoomRoomRecording]] = None


class V1RoomsSidPostRequest(BaseModel):
    Status: RoomEnumRoomStatus = Field(
        ...,
        description='The new status of the resource. Set to `completed` to end the room.',
    )
